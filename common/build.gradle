import org.springframework.boot.gradle.plugin.SpringBootPlugin

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'io.spring.dependency-management'
apply plugin: SpringBootPlugin
apply plugin: 'pmd'
apply plugin: 'com.adarshr.test-logger'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'org.sonarqube'

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor libs.lombok

    implementation libs.bundles.jackson
    implementation libs.commons.lang3
    implementation libs.jinjava
    implementation libs.lombok
    implementation libs.reflections
    implementation libs.spring.boot.starter.web
    implementation libs.spring.webmvc
    implementation libs.spring.kafka

    testAnnotationProcessor libs.lombok

    testImplementation libs.bundles.junit
    testImplementation libs.lombok
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.spring.kafka.test
    testImplementation libs.wiremock

    developmentOnly libs.spring.boot.devtools
}

project.buildDir = file("${gradle.ext.distDir.path}/common/build")

bootJar.enabled = false
bootRun.enabled = false
bootJarMainClassName.enabled = false

processResources {
    filesMatching('**/*.yml') {
        expand(project.properties)
        expand(ext.properties)
        expand(gradle.ext.properties)
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'common'

            from components.java
        }
    }
    repositories {
        mavenLocal()
        // todo: google artifact repository maven publish using service account (action/jenkins)
    }
}

sourceSets {
    itest {
        java {
            srcDirs("src/itest")
        }
    }
}

publishToMavenLocal {
    dependsOn ':common:build'
}

clean {
    delete(files('build'))
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

pitest {
    testSourceSets = [sourceSets.test, sourceSets.itest]
    mainSourceSets = [sourceSets.main]
    junit5PluginVersion = '0.14'
    timestampedReports = false
    outputFormats = ['HTML']
    reportDir = file("${project.buildDir.path}/reports/pitest")
}

task itest(type: Test) {
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    dependsOn itest

    reports.xml.enabled = true
    reports.xml.destination file("${project.buildDir.path}/jacoco/test/jacocoXml")
    reports.html.destination file("${project.buildDir.path}/jacoco/test/jacocoHtml")

    executionData tasks.withType(Test).findAll { it.state.executed }
    sourceSets sourceSets.main
}

jacoco {
    toolVersion = "0.8.7"
}

pmd {
    ruleSets = []
    ruleSetFiles = files("${rootDir}/pmd/pmd-rules.xml")
}

pitest {
    testSourceSets = [sourceSets.test, sourceSets.itest]
    mainSourceSets = [sourceSets.main]
    junit5PluginVersion = '0.14'
    timestampedReports = false
    outputFormats = ['HTML']
}

sonarqube {
    properties {
        property 'sonar.projectName', 'Common Library'
        property 'sonar.projectKey', 'Common-Library'
        property 'sonar.login', gradle.ext.common_sonar_login
        property 'sonar.sources', 'src/main'
        property 'sonar.tests', 'src/test'
        property 'sonar.java.binaries', "${gradle.ext.distDir.path}/common/build/classes"
        property 'sonar.java.test.binaries', "${gradle.ext.distDir.path}/common/build/classes"
        property 'sonar.jdbc.dialect', 'org.h2.Driver'
        property 'sonar.binaries', "${gradle.ext.distDir.path}/common/build/classes"
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.junit.reportsPath', "${gradle.ext.distDir.path}/common/build/test-results"
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.coverage.jacoco.xmlReportPaths', "${gradle.ext.distDir.path}/common/build/jacoco/test/jacocoXml"
    }
}
