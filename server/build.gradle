import org.springframework.boot.gradle.plugin.SpringBootPlugin

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: SpringBootPlugin
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'com.adarshr.test-logger'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'org.sonarqube'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    annotationProcessor libs.lombok

    compileOnly libs.lombok

    implementation libs.bundles.jackson
    implementation libs.commons.collections4
    implementation libs.commons.io
    implementation libs.commons.lang3
    implementation libs.h2
    implementation libs.higgs.common
    implementation libs.jakarta.validation
    implementation libs.javax.servlet
    implementation libs.jjwt
    implementation libs.postgresql
    implementation libs.spring.boot.starter.data.jdbc
    implementation libs.spring.boot.starter.data.jpa
    implementation libs.spring.boot.starter.jdbc
    implementation libs.spring.boot.starter.oauth2.client
    implementation libs.spring.boot.starter.security
    implementation(libs.spring.boot.starter.web) {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation libs.spring.boot.starter.websocket
    implementation libs.spring.kafka
    implementation libs.spring.webmvc

    testAnnotationProcessor libs.lombok

    testImplementation libs.lombok

    testImplementation libs.h2
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.spring.kafka.test

    testImplementation libs.bundles.junit

    testImplementation libs.bundles.mockito

    developmentOnly libs.spring.boot.devtools
}

project.buildDir = file("${gradle.ext.distDir.path}/server/build")

defaultTasks 'build'

sourceSets {
    itest {
        java {
            srcDirs("src/itest")
        }
    }
}

bootJar {
    dependsOn processResources
    archiveFileName = "${archiveBaseName.get()}.jar"
}

bootRun {
    jvmArgs = ["-Dorg.slf4j.simpleLogger.defaultLogLevel=debug"]
}

processResources {
    filesMatching('**/*.yml') {
        expand(project.properties)
        expand(ext.properties)
        expand(gradle.ext.properties)
    }
}

springBoot {
    buildInfo()
}

clean {
    delete(files('build'))
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

pitest {
    testSourceSets = [sourceSets.test, sourceSets.itest]
    mainSourceSets = [sourceSets.main]
    junit5PluginVersion = '0.14'
    timestampedReports = false
    outputFormats = ['HTML']
    reportDir = file("${project.buildDir.path}/reports/pitest")
}

task itest(type: Test) {
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    dependsOn itest

    reports.xml.enabled = true
    reports.xml.destination file("${project.buildDir.path}/jacoco/test/jacocoXml")
    reports.html.destination file("${project.buildDir.path}/jacoco/test/jacocoHtml")

    executionData tasks.withType(Test).findAll { it.state.executed }
    sourceSets sourceSets.main
}

jacoco {
    toolVersion = "0.8.7"
}

pmd {
    ruleSets = []
    ruleSetFiles = files("${rootDir}/pmd/pmd-rules.xml")
}

sonarqube {
    properties {
        property 'sonar.projectName', 'Home Assistant Main Server'
        property 'sonar.projectKey', 'Home-Assistant-Main-Server'
        property 'sonar.login', gradle.ext.server_sonar_login
        property 'sonar.projectVersion', version
        property 'sonar.sources', 'src/main'
        property 'sonar.tests', 'src/test'
        property 'sonar.java.binaries', "${gradle.ext.distDir.path}/server/build/classes"
        property 'sonar.java.test.binaries', "${gradle.ext.distDir.path}/server/build/classes"
        property 'sonar.jdbc.dialect', 'org.postgresql.Driver'
        property 'sonar.binaries', "${gradle.ext.distDir.path}/server/build/classes"
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.junit.reportsPath', "${gradle.ext.distDir.path}/server/build/test-results"
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.coverage.jacoco.xmlReportPaths', "${gradle.ext.distDir.path}/server/build/jacoco/test/jacocoXml"
    }
}
