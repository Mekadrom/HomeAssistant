import org.springframework.boot.gradle.plugin.SpringBootPlugin

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: SpringBootPlugin
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'com.adarshr.test-logger'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'org.sonarqube'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    compileOnly 'org.projectlombok:lombok:1.18.24'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.13.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.0'

    implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'

    implementation group: 'org.springframework', name: 'spring-webmvc', version: '5.3.8'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

    implementation 'org.postgresql:postgresql'

    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    implementation 'com.h2database:h2'

    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

    implementation group: 'com.higgs', name: 'common', version: version

    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'

    testImplementation 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.3.1'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '4.3.1'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

project.buildDir = file("${gradle.ext.distDir.path}/server/build")

sourceSets {
    itest {
        java {
            srcDirs("src/itest")
        }
    }
}

bootJar {
    dependsOn processResources
    archiveFileName = "${archiveBaseName.get()}.jar"
}

bootRun {
    jvmArgs = ["-Dorg.slf4j.simpleLogger.defaultLogLevel=debug"]
}

processResources {
    filesMatching('**/*.yml') {
        expand(project.properties)
        expand(ext.properties)
        expand(gradle.ext.properties)
    }
}

springBoot {
    buildInfo()
}

clean {
    delete(files('build'))
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

pitest {
    testSourceSets = [sourceSets.test, sourceSets.itest]
    mainSourceSets = [sourceSets.main]
    junit5PluginVersion = '0.14'
    timestampedReports = false
    outputFormats = ['HTML']
    reportDir = file("${project.buildDir.path}/reports/pitest")
}

task itest(type: Test) {
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    dependsOn itest

    reports.xml.enabled = true
    reports.xml.destination file("${project.buildDir.path}/jacoco/test/jacocoXml")
    reports.html.destination file("${project.buildDir.path}/jacoco/test/jacocoHtml")

    executionData tasks.withType(Test).findAll { it.state.executed }
    sourceSets sourceSets.main
}

jacoco {
    toolVersion = "0.8.7"
}

pmd {
    ruleSets = []
    ruleSetFiles = files("${rootDir}/pmd/pmd-rules.xml")
}

sonarqube {
    properties {
        property 'sonar.projectName', 'Home Assistant Main Server'
        property 'sonar.projectKey', 'Home-Assistant-Main-Server'
        property 'sonar.login', gradle.ext.server_sonar_login
        property 'sonar.projectVersion', version
        property 'sonar.sources', 'src/main'
        property 'sonar.tests', 'src/test'
        property 'sonar.java.binaries', "${gradle.ext.distDir.path}/server/build/classes"
        property 'sonar.java.test.binaries', "${gradle.ext.distDir.path}/server/build/classes"
        property 'sonar.jdbc.dialect', 'org.postgresql.Driver'
        property 'sonar.binaries', "${gradle.ext.distDir.path}/server/build/classes"
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.junit.reportsPath', "${gradle.ext.distDir.path}/server/build/test-results"
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.coverage.jacoco.xmlReportPaths', "${gradle.ext.distDir.path}/server/build/jacoco/test/jacocoXml"
    }
}
