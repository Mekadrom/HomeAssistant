buildscript {
    repositories {
        mavenLocal()
    }
}

plugins {
    id 'java'
    id "io.freefair.lombok" version "6.3.0"
    id 'org.springframework.boot' version '2.5.0'
    id 'pmd'
    id 'com.adarshr.test-logger' version '3.2.0' apply false
}

def ordered(String... dependencyPaths) {
    def dependencies = dependencyPaths.collect { tasks.getByPath(it) }
    for (int i = 0; i < dependencies.size() - 1; i++) {
        dependencies[i + 1].mustRunAfter(dependencies[i])
    }
    return dependencies
}

sourceCompatibility = 17
targetCompatibility = 17

apply from: 'env.gradle'

ext {
    secretContents = new File(gradle.ext.secretPath).text
}

repositories {
    mavenLocal()
    mavenCentral()
}

task buildAll {
    dependsOn ordered(':common:build', ':common:publishToMavenLocal', ':server:bootJar', ':simulator:build', ':actionserver:bootJar')
}

compileJava {
    enabled = false
}

clean {
    dependsOn ':common:clean'
    dependsOn ':server:clean'
    dependsOn ':simulator:clean'
    dependsOn ':actionserver:clean'
    dependsOn ':frontend:clean'
    doFirst {
        delete "${gradle.ext.distDir}"
    }
}

task distribute {
    dependsOn ordered(':clean', ':buildAll', project.hasProperty('buildProd') ? ':frontend:buildFrontend' : ':frontend:buildFrontendDev')
    finalizedBy 'copyToDist'
}

task copyToDist(type: Copy) {
    doFirst {
        mkdir "${gradle.ext.distDir}"

        subprojects.stream().forEach {
            mkdir "${gradle.ext.distDir}/${it.name}"
        }
    }

    into("${gradle.ext.distDir}")

    // only include fatjars
    ['server', 'actionserver'].forEach { proj ->
        into("${proj}") {
            with copySpec {
                from("${proj}/build/libs") {
                    exclude '*-*'
                }
            }
        }
    }

    // include all libs
    ['common'].forEach { proj ->
        into("${proj}") {
            with copySpec {
                from("${proj}/build/libs")
            }
        }
    }

    // not a jar
    into('frontend') {
        with copySpec {
            from('frontend/dist/frontend')
        }
    }
}

test {
    dependsOn ':actionserver:test'
    dependsOn ':common:test'
    dependsOn ':frontend:test'
    dependsOn ':server:test'
}

pmdMain {
    dependsOn ':common:pmdMain'
    dependsOn ':server:pmdMain'
    dependsOn ':simulator:pmdMain'
    dependsOn ':actionserver:pmdMain'
}

pmdTest {
    dependsOn ':common:pmdTest'
    dependsOn ':server:pmdTest'
    dependsOn ':simulator:pmdTest'
    dependsOn ':actionserver:pmdTest'
}

task buildServerImage(type: Exec) {
    dependsOn distribute
    executable = "${gradle.ext.imgBuildExec}"
    args = ['build', "${rootDir}", '-f', 'env/kubernetes/server/Dockerfile', '-t', "${gradle.ext.gcpArtifactRoot}/${gradle.ext.serverArtifactName}:${version}", '--build-arg', "artifactPath=${gradle.ext.distDir}/server/"]
}

task buildFrontendImage(type: Exec) {
    dependsOn distribute
    executable = "${gradle.ext.imgBuildExec}"
    args = ['build', "${rootDir}", '-f', 'env/kubernetes/frontend/Dockerfile', '-t', "${gradle.ext.gcpArtifactRoot}/${gradle.ext.frontendArtifactName}:${version}", '--build-arg', "artifactPath=${gradle.ext.distDir}/frontend/"]
}

task pushServerImageToMinikube(type: Exec) {
    executable = "${gradle.ext.clusterExec}"
    args = ['image', 'load', "${gradle.ext.gcpArtifactRoot}/${gradle.ext.serverArtifactName}:${version}"]
}

task pushFrontendImageToMinikube(type: Exec) {
    executable = "${gradle.ext.clusterExec}"
    args = ['image', 'load', "${gradle.ext.gcpArtifactRoot}/${gradle.ext.frontendArtifactName}:${version}"]
}

task pushImagesToMinikube() {
    dependsOn pushServerImageToMinikube
    dependsOn pushFrontendImageToMinikube
}

task pushServerImage(type: Exec) {
    executable = "${gradle.ext.imgBuildExec}"
    args = ['push', "${gradle.ext.gcpArtifactRoot}/${gradle.ext.serverArtifactName}:${version}"]
}

task pushFrontendImage(type: Exec) {
    executable = "${gradle.ext.imgBuildExec}"
    args = ['push', "${gradle.ext.gcpArtifactRoot}/${gradle.ext.frontendArtifactName}:${version}"]
}

task buildImages {
    dependsOn buildServerImage
    dependsOn buildFrontendImage
}

task pushImages {
    dependsOn pushServerImage
    dependsOn pushFrontendImage
}

task buildAndPushImages {
    dependsOn buildImages
    dependsOn pushImages
}

task copyKustomizationFiles(type: Copy) {
    from('env/kubernetes/') {
        include '**/*.yml'
        expand(project.properties)
        expand(ext.properties)
        expand(gradle.ext.properties)
    }
    into 'dist/kubernetes'
}

task kustomize(type: Exec) {
    dependsOn copyKustomizationFiles
    workingDir = 'dist/kubernetes/'
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['kustomize', '-o', 'deployment.yml']
}

task createSecret(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['create', 'secret', 'docker-registry', 'gcr-json-key', "--docker-server=${gradle.ext.artifactoryUrl}", '--docker-username=_json_key', "--docker-password='${secretContents}'", "--docker-email=${gradle.ext.dockerEmail}"]
}

task kubeApply(type: Exec) {
    workingDir = "${gradle.ext.distDir}/kubernetes/"
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['apply', '-f', 'deployment.yml']
}

task buildAndDeploy(type: Exec) {
    dependsOn distribute
    dependsOn buildAndPushImages
    dependsOn kustomize
    dependsOn kubeApply
}

task startMinikube(type: Exec) {
    executable = "${gradle.ext.clusterExec}"
    args = ['start', "--nodes=${gradle.ext.clusterNodeCount}"]
}

task tagWorker2(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['label', 'node', 'minikube-m02', 'node-role.kubernetes.io/worker=worker']
}

task tagWorker3(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['label', 'node', 'minikube-m03', 'node-role.kubernetes.io/worker=worker']
}

task tagWorkers {
    dependsOn tagWorker2
    dependsOn tagWorker3
}

task stopMinikube(type: Exec) {
    executable = "${gradle.ext.clusterExec}"
    args = ['stop']
}

task deleteMinikube(type: Exec) {
    dependsOn stopMinikube
    executable = "${gradle.ext.clusterExec}"
    args = ['delete']
}

task deleteServerImageDeployment(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['delete', 'deployment', 'app-server0']
}

task deleteFrontendImageDeployment(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['delete', 'deployment', 'frontend0']
}

task deleteImageDeployments {
    dependsOn deleteServerImageDeployment
    dependsOn deleteFrontendImageDeployment
}

task deleteServerContainerService(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['delete', 'service', 'app-server']
}

task deleteFrontendContainerService(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['delete', 'service', 'frontend']
}

task deleteImageServices {
    dependsOn deleteServerContainerService
    dependsOn deleteFrontendContainerService
}

task fullClusterSetup {
    dependsOn ordered(':buildAndPushImages', ':kustomize', ':startMinikube', ':tagWorkers', ':createSecret', ':kubeApply')
}

task fullClusterSetupLocal {
    dependsOn ordered(':buildImages', ':kustomize', ':startMinikube', ':pushImagesToMinikube', ':tagWorkers', ':createSecret', ':kubeApply')
}

task reloadCluster {
    dependsOn ordered(':buildImages', ':kustomize', ':deleteImageDeployments', ':pushImagesToMinikube', ':kubeApply')
}

task takeDownProjectContainers {
    dependsOn ordered(':deleteImageDeployments', ':deleteImageServices')
}

task initDb(type: Exec) {
    workingDir = 'hadb/'
    executable = "./initdb.sh"
    args = ['-u', "${gradle.ext.dbUsername}", '-p', "${gradle.ext.dbPassword}", '-U', "${gradle.ext.dbUrl}", '-P', "${gradle.ext.dbPort}", '-d', "${gradle.ext.dbDomain}", '-s', "${gradle.ext.dbSchema}"]
}

task cleanDb(type: Exec) {
    workingDir = 'hadb/'
    executable = './cleandb.sh'
    args = ['-u', "${gradle.ext.dbUsername}", '-p', "${gradle.ext.dbPassword}", '-U', "${gradle.ext.dbUrl}", '-P', "${gradle.ext.dbPort}", '-d', "${gradle.ext.dbDomain}", '-s', "${gradle.ext.dbSchema}"]
}

task deltaRun(type: Exec) {
    workingDir = 'hadb/'
    executable = './deltarun.sh'
    args = ['-u', "${gradle.ext.dbUsername}", '-p', "${gradle.ext.dbPassword}", '-U', "${gradle.ext.dbUrl}", '-P', "${gradle.ext.dbPort}", '-d', "${gradle.ext.dbDomain}"]
}
