import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    repositories {
        mavenLocal()
    }
}

plugins {
    id 'org.springframework.boot' version '2.5.0'
    id 'java'
}

ext {
    distDir = 'dist'
}

repositories {
    mavenLocal()
    mavenCentral()
}

subprojects { subproject ->
    subproject.apply plugin: 'io.spring.dependency-management'
    subproject.apply plugin: 'java'
    subproject.apply plugin: SpringBootPlugin

    sourceCompatibility = 17
    targetCompatibility = 17

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        runtimeDependency {
            canBeResolved = true
        }
        testRuntimeDependency {
            canBeResolved = true
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        configurations.implementation.extendsFrom(configurations.runtimeDependency)
        configurations.testImplementation.extendsFrom(configurations.testRuntimeDependency)

        annotationProcessor 'org.projectlombok:lombok'

        runtimeDependency 'org.projectlombok:lombok'

        runtimeDependency group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

        runtimeDependency group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'

        runtimeDependency group: 'org.springframework', name: 'spring-webmvc', version: '5.3.8'
        runtimeDependency 'org.springframework.boot:spring-boot-starter-oauth2-client'
        runtimeDependency 'org.springframework.boot:spring-boot-starter-security'
        runtimeDependency 'org.springframework.kafka:spring-kafka'
        runtimeDependency 'org.springframework.boot:spring-boot-starter-websocket'

        runtimeDependency group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

        runtimeDependency 'org.postgresql:postgresql'

        runtimeDependency 'org.springframework.boot:spring-boot-starter-data-jdbc'
        runtimeDependency 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeDependency 'org.springframework.boot:spring-boot-starter-jdbc'

        runtimeDependency 'com.h2database:h2'

        runtimeDependency('org.springframework.boot:spring-boot-starter-web') {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }

        runtimeDependency group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

        runtimeDependency group: 'com.higgs', name: 'common', version: version

        implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'

        testRuntimeDependency 'com.h2database:h2'

        testRuntimeDependency 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeDependency 'org.springframework.kafka:spring-kafka-test'
        testRuntimeDependency 'org.springframework.security:spring-security-test'

        testRuntimeDependency 'org.junit.jupiter:junit-jupiter-api:5.7.0'

        testRuntimeDependency 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

        developmentOnly 'org.springframework.boot:spring-boot-devtools'
    }

    test {
        useJUnitPlatform()
    }
}

task buildAll {
    dependsOn ':common:build'
    dependsOn ':common:publishToMavenLocal'
    dependsOn ':server:build'
    dependsOn ':actionserver:build'
    dependsOn ':actionserver:bootJar'
}

clean.doFirst {
    delete "${distDir}"
}

task distribute {
    dependsOn 'buildAll'
    dependsOn project.hasProperty('buildProd') ? ':frontend:buildFrontend' : ':frontend:buildFrontendDev'
    finalizedBy 'copyToDist'
}

task copyToDist(type: Copy) {
    dependsOn clean
    doFirst {
        mkdir "${distDir}"

        subprojects.stream().forEach {
            mkdir "${distDir}/${it.name}"
        }
    }

    into("${distDir}")

    // only include fatjars
    ['server', 'actionserver'].forEach {proj ->
        into("${proj}") {
            with copySpec {
                from("${proj}/build/libs") {
                    exclude '*-*'
                }
            }
        }
    }

    // include all libs
    ['common'].forEach {proj ->
        into("${proj}") {
            with copySpec {
                from("${proj}/build/libs")
            }
        }
    }

    // not a jar
    into('frontend') {
        with copySpec {
            from('frontend/dist/frontend')
        }
    }
}
