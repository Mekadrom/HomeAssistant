import org.springframework.boot.gradle.plugin.SpringBootPlugin

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'io.spring.dependency-management'
apply plugin: SpringBootPlugin
apply plugin: 'pmd'
apply plugin: 'com.adarshr.test-logger'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'org.sonarqube'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    annotationProcessor libs.lombok

    implementation libs.bundles.jackson
    implementation libs.commons.lang3
    implementation libs.higgs.common
    implementation libs.lombok
    implementation libs.reflections
    implementation libs.spring.boot.starter.web
    implementation libs.spring.kafka
    implementation libs.spring.webmvc

    testAnnotationProcessor libs.lombok

    testImplementation libs.bundles.junit
    testImplementation libs.lombok
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.spring.kafka.test

    developmentOnly libs.spring.boot.devtools
}

project.buildDir = file("${gradle.ext.distDir.path}/actionserver/build")

sourceSets {
    itest {
        java {
            srcDirs("src/itest")
        }
    }
}

bootJar {
    dependsOn processResources
    archiveFileName = "${archiveBaseName.get()}.jar"
}

bootRun {
    systemProperty 'spring.profiles.active', System.getProperty('spring.profiles.active') ?: 'local'
    if (System.hasProperty('server.port')) {
        systemProperty 'server.port', System.getProperty('server.port')
    }

    jvmArgs = ["-Dorg.slf4j.simpleLogger.defaultLogLevel=debug"]
}

processResources {
    filesMatching('**/*.yml') {
        expand(project.properties)
        expand(ext.properties)
        expand(gradle.ext.properties)
    }
}

springBoot {
    buildInfo()
}

pmd {
    ruleSets = []
    ruleSetFiles = files("${rootDir}/pmd/pmd-rules.xml")
}

clean {
    delete(files('build'))
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

pitest {
    testSourceSets = [sourceSets.test, sourceSets.itest]
    mainSourceSets = [sourceSets.main]
    junit5PluginVersion = '0.14'
    timestampedReports = false
    outputFormats = ['HTML']
    reportDir = file("${project.buildDir.path}/reports/pitest")
}

task itest(type: Test) {
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    dependsOn itest

    reports.xml.enabled = true
    reports.xml.destination file("${project.buildDir.path}/jacoco/test/jacocoXml")
    reports.html.destination file("${project.buildDir.path}/jacoco/test/jacocoHtml")

    executionData tasks.withType(Test).findAll { it.state.executed }
    sourceSets sourceSets.main
}

jacoco {
    toolVersion = "0.8.7"
}

sonarqube {
    properties {
        property 'sonar.projectName', 'Action Server'
        property 'sonar.projectKey', 'Action-Server'
        property 'sonar.login', gradle.ext.actionserver_sonar_login
        property 'sonar.sources', 'src/main'
        property 'sonar.tests', 'src/test'
        property 'sonar.java.binaries', "${gradle.ext.distDir.path}/actionserver/build/classes"
        property 'sonar.java.test.binaries', "${gradle.ext.distDir.path}/actionserver/build/classes"
        property 'sonar.jdbc.dialect', 'org.h2.Driver'
        property 'sonar.binaries', "${gradle.ext.distDir.path}/actionserver/build/classes"
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.junit.reportsPath', "${gradle.ext.distDir.path}/actionserver/build/test-results"
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.coverage.jacoco.xmlReportPaths', "${gradle.ext.distDir.path}/actionserver/build/jacoco/test/jacocoXml"
    }
}
